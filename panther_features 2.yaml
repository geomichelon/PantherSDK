# panther_features.yaml
# Master feature roadmap for PantherSDK
# Version: 1.0
# Maintainer: Panther Core Team

project:
  name: PantherSDK
  description: >
    Multiplatform SDK for LLM evaluation, compliance, and observability.
    Includes Rust core, Python API, and bindings for Swift, Kotlin, Flutter, and React Native.

architecture:
  type: Clean / Hexagonal
  layers:
    - domain: Core entities and contracts (model-agnostic)
    - application: Use cases and orchestration
    - adapters: Providers, telemetry, storage, observability
    - interfaces: FFI/PyO3/WASM for cross-platform integrations

targets:
  platforms:
    - iOS (Swift)
    - Android (Kotlin)
    - Flutter (Dart)
    - React Native (JS/TypeScript)
    - Python (Server / FastAPI)
    - Web (WASM)

---

features:

  core_runtime:
    description: Core Panther Engine in Rust â€” orchestration, telemetry, persistence
    components:
      - panther-domain: Base entities, ports
      - panther-core: Engine use-cases, metrics, storage orchestration
      - panther-providers: LLM adapters (NullProvider, OpenAI, Ollama)
      - panther-observability: Logging and tracing sink
      - panther-metrics: Metrics collection and aggregation
      - panther-storage: In-memory and sled persistence
    status: active
    coverage: 0.9
    next:
      - Add async LlmProvider
      - Implement real OpenAI/Ollama/Anthropic adapters
      - Add tokenizer abstraction

  storage_and_data:
    description: Persistent metrics, runs, and evaluations
    components:
      - panther-storage
      - panther-storage-sled
      - SQLite/Postgres adapters (planned)
    status: in_progress
    coverage: 0.7
    next:
      - Add schema for evaluations and metrics
      - Implement SQL-based analytics
      - Export/import `.pantherdb` snapshots

  ffi_cross_platform:
    description: C ABI + bindings for Swift/Kotlin/Flutter/RN
    components:
      - panther-ffi
      - bindings/include/panther.h
    platforms:
      - Swift: âœ… full Xcode sample
      - Kotlin: âœ… Android sample with JNI
      - Flutter: ðŸŸ¡ scaffold pending
      - React Native: ðŸŸ¡ TurboModule integration
    status: in_progress
    coverage: 0.8
    next:
      - Automate bindings via UniFFI/flutter_rust_bridge
      - Add integration tests across FFI boundaries

  python_api:
    description: PyO3-based API for evaluation and governance
    components:
      - panther-py
      - python/panthersdk/api.py
    endpoints:
      - /metrics/evaluate
      - /metrics/history
      - /bias/analyze
    status: in_progress
    coverage: 0.6
    next:
      - Add policy evaluation workflows
      - Add JWT auth and audit logging
      - Integrate guidelines validation

  compliance_guidelines:
    description: Compare LLM outputs against institutional rules (FDA, ANVISA, EMA)
    components:
      - GuidelineLoader (API / local)
      - SemanticValidator (ChromaDB)
      - ComplianceScore & RankingEngine
    status: planned
    coverage: 0.0
    next:
      - Integrate guideline ingestion from Drive/S3
      - Add vector search + similarity scoring
      - Implement trust_index and bias_score

  blockchain_verification:
    description: Digital signatures and blockchain-based guideline validation
    components:
      - Hashing (SHA3-512)
      - Signing (ED25519)
      - Blockchain registry (Ethereum/Polygon)
    status: planned
    coverage: 0.0
    next:
      - Add verification pipeline in Rust core
      - Publish proof-of-integrity to blockchain
      - Validate locally during compliance checks

  observability_metrics:
    description: Metrics, logs, and telemetry for SDK and API
    components:
      - panther-metrics
      - panther-observability
    integrations:
      - Prometheus
      - OTLP / OpenTelemetry
      - Grafana / Power BI
    status: in_progress
    coverage: 0.6
    next:
      - Add exporter for Prometheus
      - Aggregate p50/p95 latency metrics
      - Cross-FFI span correlation

  developer_experience:
    description: Improve build, CI/CD, packaging and developer flow
    components:
      - Cargo workspace
      - GitHub Actions
      - cbindgen config
      - Release artifacts (.xcframework, .aar, .whl)
    status: in_progress
    coverage: 0.8
    next:
      - Add CLI tool (panther-cli)
      - Improve automation for samples
      - Unified packaging for mobile SDKs

  samples:
    description: Example applications showcasing SDK usage
    base_samples:
      - iOS (Swift): âœ… metrics + logs
      - Android (Kotlin): âœ… metrics + logs
      - Flutter: ðŸŸ¡ scaffold
      - React Native: ðŸŸ¡ scaffold
    domain_samples:
      - MedicalCompliance:
          goal: Evaluate LLM outputs vs FDA/ANVISA guidelines
          platforms: [iOS, Android, Flutter, RN]
          data: Preloaded healthcare prompts and answers
      - VehicleRental:
          goal: Evaluate LLM handling of insurance/policy pricing
          platforms: [iOS, Android, Flutter, RN]
          data: Mock car rental dataset
    status: in_progress
    coverage: 0.5
    next:
      - Add compliance report generation
      - Include bias and trust tests in samples

  future_extensions:
    description: Long-term features aligned with full Panther vision
    planned_features:
      - Panther Cloud (shared guidelines + global ranking)
      - Explainability Layer (justification engine)
      - LLM Sandbox (safe local evaluation)
      - Dataset Marketplace
      - Edge/WebGPU execution for on-device models
    status: planned
    coverage: 0.0

---

summary:
  current_coverage: 0.6
  target_coverage: 0.9
  milestone_goals:
    - Complete provider integration (OpenAI/Ollama)
    - Implement compliance + blockchain layers
    - Finalize Flutter/RN samples
    - Add SQL storage and Prometheus exporter
    - Prepare Panther 1.0 unified release
